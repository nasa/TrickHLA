/*****************************************************************************
 * General TrickHLA Simulation Thread Class Definition Object
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines a
 *     general HLA interface using TrickHLA for Trick based simulations.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Dan E. Dexter
 *         Date: March 2023
 *       E-Mail: Dan.E.Dexter@nasa.gov
 *        Phone: 281-483-1142
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: Dan Dexter
 *        Date: March 2023
 * Description: Modified THLABase.sm to work with THLAThread.sm to support
 *              TrickHLA working with HLA data processed across different
 *              Trick child threads.
*---------------------------------------------------------------------------*
 * Modified By: Dan Dexter
 *        Date: January 2024
 * Description: Updated to account for child threads sending and receiving
 *              data at a different rate than the main thread. This now
 *              requires the main thread data cycle time to be specified.
 ****************************************************************************/

// Trick include files.
##include "trick/exec_proto.h"

// TrickHLA include files.
##include "TrickHLA/Federate.hh"

//============================================================================
// SIM_OBJECT: THLAThreadSimObject - TrickHLA Multi-Thread interface routines.
//============================================================================
class THLAThreadSimObject : public Trick::SimObject {

 public:
   THLAThreadSimObject( TrickHLA::Federate & thla_fed,
                        double main_thread_data_cycle,
                        double child_thread_data_cycle,
                        unsigned int _THREAD_ID,
                        unsigned short _1ST  = 1,
                        unsigned short _LAST = 65534 )
      : federate( thla_fed ),
        data_cycle_time( child_thread_data_cycle ),
        data_send_time( child_thread_data_cycle - main_thread_data_cycle ),
        thread_id( _THREAD_ID )
   {
      // Do a sanity check on the data cycle time.
      if ( child_thread_data_cycle <= 0.0 ) {
         exec_terminate( __FILE__, "THLAThreadSimObject() child_thread_data_cycle must be > 0.0!" );
      }
      if ( child_thread_data_cycle < main_thread_data_cycle ) {
         exec_terminate( __FILE__, "THLAThreadSimObject() child_thread_data_cycle must be >= main_thread_data_cycle!" );
      }

      // Associate this Trick child thread ID to our TrickHLA Federate.
      // Because the federate class initializes the thread state array as
      // a phase 1 (i.e. P1) initialization class job, the earliest we can
      // associate the Trick child thread is phase 2 (i.e. P2). The HLA object
      // instance names, as a comma seperated string, that are associated with
      // this Trick child thread. TrickHLA will maintain data coherancy for the
      // HLA object instances specified over the data cycle time specified.
      // Also, there is a P3 job that will verify all the Trick child thread
      // associations to object instances.
      P2 ("initialization") federate.associate_to_trick_child_thread( thread_id, data_cycle_time );

      // Wait for the HLA data to be received.
      C_THREAD_ID P_1ST (data_cycle_time, "environment") federate.wait_to_receive_data();

      // Wait to send the HLA data when all Trick child threads are ready at the
      // end of the frame of the data cycle window. This job needs to be started
      // to run in the last minor frame of the child thread data cycle window
      // (i.e. offset one main thread cycle from the end of child thread cycle).
      C_THREAD_ID P_LAST (data_cycle_time, data_send_time, "logging") federate.wait_to_send_data();
   }

 private:
   TrickHLA::Federate & federate;
 
 protected:
   double               data_cycle_time;
   double               data_send_time;
   unsigned int         thread_id;

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   THLAThreadSimObject( THLAThreadSimObject const & rhs );
   THLAThreadSimObject & operator=( THLAThreadSimObject const & rhs );

   // Do not allow the default constructor.
   THLAThreadSimObject();
};
