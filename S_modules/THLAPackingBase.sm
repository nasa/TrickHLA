/*****************************************************************************
 * General TrickHLA Simulation Definition module for the base Trick HLA
 * Packing object.
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines the
 *     standard base interface for a TrickHLA packing object instance.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: December 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/
 
#ifndef TRICKHLA_PACKING_BASE_SIM_OBJECT
#define TRICKHLA_PACKING_BASE_SIM_OBJECT

// System include files.
##include <sstream>

// TrickHLA include files.
##include "TrickHLA/Conditional.hh"
##include "TrickHLA/DebugHandler.hh"
##include "TrickHLA/LagCompensation.hh"
##include "TrickHLA/Object.hh"
##include "TrickHLA/ObjectDeleted.hh"
##include "TrickHLA/OwnershipHandler.hh"
##include "TrickHLA/Packing.hh"

//==========================================================================
// SIM_OBJECT: TrickHLAPackingBaseSimObject - A base simulation definition
// module implementation to support a TrickHLA packing object instance.
// This simulation definition module is entended to be extended.
//==========================================================================
class TrickHLAPackingBaseSimObject : public Trick::SimObject {

  public:
   
   /* Associated TrickHLA base Packing object reference. */
   TrickHLA::Packing * packing_base_ptr;

   /* HLA base Lag Compensation object reference. */
   TrickHLA::LagCompensation * lag_comp_base_ptr;

   /* HLA base Conditional object reference. */
   TrickHLA::Conditional * conditional_base_ptr;

   /* HLA base Ownership Handler object refereence. */
   TrickHLA::OwnershipHandler * ownership_base_ptr;

   /* HLA base Object Deleted object reference. */
   TrickHLA::ObjectDeleted * deleted_base_ptr;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   TrickHLAPackingBaseSimObject( unsigned short _INIT = P_HLA_INIT  )
      : packing_base_ptr( NULL ),
        lag_comp_base_ptr( NULL ),
        conditional_base_ptr( NULL ),
        ownership_base_ptr( NULL ),
        deleted_base_ptr( NULL )
   {
      //
      // Desfault data jobs
      //
      ("default_data") default_config();
      
      //
      // Initialization jobs
      //
      P_INIT ("initialization") initialize();
   }
   
  protected:
   virtual int default_config()
   {
      if ( packing_base_ptr == NULL ){
         std::ostringstream errmsg;
         errmsg << "TrickHLAPackingBaseSimObject::default_config():" << __LINE__
                << " ERROR: Unexpected NULL Packing obbject!\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }
      
      // Get the associated TrickHLA manager object.
      TrickHLA::Object * mngr_obj_ptr = packing_base_ptr->get_object();
      
      // If the manager object is set, then configure the auxiliary services.
      // This will probably only be true for configuring with defualt data.
      if ( mngr_obj_ptr != NULL ) {
      
         // Setup lag compensation.
         mngr_obj_ptr->lag_comp      = lag_comp_base_ptr;
         mngr_obj_ptr->lag_comp_type = TrickHLA::LAG_COMPENSATION_NONE;
      
         // Setup the auxiliary object management services.
         mngr_obj_ptr->conditional = conditional_base_ptr;
         mngr_obj_ptr->ownership   = ownership_base_ptr;
         mngr_obj_ptr->deleted     = deleted_base_ptr;
      }
      
      return( 0 );
   }
   
   virtual int initialize()
   {
      // We must have a Packing object.
      if ( packing_base_ptr == NULL ){
         std::ostringstream errmsg;
         errmsg << "TrickHLAPackingBaseSimObject::default_config():" << __LINE__
                << " ERROR: Unexpected NULL Packing obbject!\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      } else {
         packing_base_ptr->initialize();
      }

      // Check for a Lag Compensation object.
      if ( lag_comp_base_ptr != NULL ){
         lag_comp_base_ptr->initialize();
      }
      
      // Check for a Conditional object.
      if ( conditional_base_ptr != NULL ){
         conditional_base_ptr->initialize();
      }
      
      return( 0 );
   }

  private:
   // This object is not copyable
   TrickHLAPackingBaseSimObject( TrickHLAPackingBaseSimObject const & );
   TrickHLAPackingBaseSimObject & operator=( TrickHLAPackingBaseSimObject const & );
};

#endif // TRICKHLA_PACKING_BASE_SIM_OBJECT: Do NOT put anything after this line!
