/*****************************************************************************
 * General TrickHLA Simulation Base Class Definition Object
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines a
 *     general HLA interface using TrickHLA for Trick based simulations.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Dan E. Dexter
 *         Date: August 2010
 *       E-Mail: Dan.E.Dexter@nasa.gov
 *        Phone: 281-483-1142
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: Edwin Z. Crues
 *        Date: April 2020
 * Description: Modified THLA.sm to create THLABase.sm to support
 *              ExecutionControl extensions.
 ****************************************************************************/

#ifndef IMSIM_SIM_OBJECT
#define IMSIM_SIM_OBJECT

// Trick include files.
##include "trick/exec_proto.h"

// TrickHLA include files.
##include "TrickHLA/FedAmb.hh"
##include "TrickHLA/Federate.hh"
##include "TrickHLA/Manager.hh"

// Include these TrickHLA header files here so that Trick can find and process
// these forward declared classes because they are also not included by any
// TrickHLA header file. Otherwise the autogenerated Trick ATTRIBUTES named
// <namespace>__<classname> (e.g. TrickHLA__Interaction) will not get
// created because Trick can't figure out the header file dependencies for
// these header files.
##include "TrickHLA/Interaction.hh"
##include "TrickHLA/InteractionHandler.hh"
##include "TrickHLA/InteractionItem.hh"
##include "TrickHLA/LagCompensation.hh"
##include "TrickHLA/ObjectDeleted.hh"
##include "TrickHLA/OwnershipHandler.hh"
##include "TrickHLA/Parameter.hh"
##include "TrickHLA/ParameterItem.hh"

//=========================================================================
// SIM_OBJECT: IMSim - Generalized TrickHLA interface routines.
//=========================================================================
class IMSimSimObject : public Trick::SimObject {

 public:

   //----- DATA STRUCTURE DECLARATIONS -----   
   TrickHLA::Federate federate;
   TrickHLA::FedAmb   federate_amb;
   TrickHLA::Manager  manager;

   double             checkpoint_time;
   char const *       checkpoint_label;

   double             check_pause_job_offset;
   double const       CHECK_PAUSE_DELTA;

   IMSimSimObject( double main_thread_data_cycle,
                   double main_thread_interaction_cycle,
                   unsigned short _1ST  = 1,
                   unsigned short _INIT = 60,
                   unsigned short _LAST = 65534 ) 
      : data_cycle_time( main_thread_data_cycle ),
        CHECK_PAUSE_DELTA( 0.000001 )
   {
      // Validate the data and interaction cycle times.
      if ( main_thread_data_cycle <= 0.0 ) {
         exec_terminate( __FILE__, "IMSimSimObject() main_thread_data_cycle must be > 0.0!" );
      }
      if ( main_thread_interaction_cycle <= 0.0 ) {
         exec_terminate( __FILE__, "IMSimSimObject() main_thread_interaction_cycle must be > 0.0!" );
      }

      // Calculate and validate the check-pause job offset time.
      if ( main_thread_data_cycle <= CHECK_PAUSE_DELTA ) {
         exec_terminate( __FILE__, "IMSimSimObject() main_thread_data_cycle must be > CHECK_PAUSE_DELTA!" );
      }
      check_pause_job_offset = main_thread_data_cycle - CHECK_PAUSE_DELTA;


      //-----------------------
      //-- DEFAULT DATA JOBS --
      //-----------------------

      //-------------------------
      //-- INITIALIZATION JOBS --
      //-------------------------

      // Initialize the debug settings just after the Input Processor runs as
      // the first job so the debug settings are available and valid.
      P1 ("initialization") federate.initialize_debug();

      // Initialize thread state memory associated with the Trick child threads.
      P1 ("initialization") federate.initialize_thread_state( data_cycle_time, obj_instance_names );

      // Associate the Trick main thread the the specified object instance names.
      // TrickHLA will maintain data coherancy for the HLA object instances
      // specified over the data cycle time specified.
      P1 ("initialization") federate.associate_to_trick_child_thread( 0, data_cycle_time );

      P_INIT ("initialization") federate.initialize( federate_amb );

      // Initialize the TrickHLA Manger which will setup the RTI interface,
      // confirm all required federates have joined the federation, perform
      // dynamic initialization with the federates, and start the simulation.
      P_INIT ("initialization") manager.initialize( federate );

      // The last step of the multi-phase initialization. We make sure this
      // initialization job runs last by setting the initialization phase
      // to P65534, since this job indicates to the other federates that
      // we are ready to start running the simulation.
      P_LAST ("initialization") manager.initialization_complete();

      // FIXME: This is for IMSim and DIS only. Needs to be moved into ExecutionControl.
      // Check to see if fed master started in freeze mode.
      //P_LAST ("initialization") federate.check_pause_at_init( CHECK_PAUSE_DELTA );

      // Coordinate Central Timing Equipment (CTE) go to run.
      //P_LAST ("initialization") federate.coordinate_CTE_go_to_run();

      //------------------------------
      //-- FREEZE / CHECKPOINT JOBS --
      //------------------------------

      // Perform the federate save (checkpoint) or restore in FREEZE mode.
      P_1ST ("checkpoint") federate.setup_checkpoint();
      ("freeze") federate.perform_checkpoint();
      P_1ST ("preload_checkpoint") federate.setup_restore();
      ("freeze") federate.perform_restore();

      // Coordinate federates going to run mode.
      P_1ST ("freeze_init") federate.freeze_init();
      P_1ST ("freeze") federate.check_freeze();
      ("unfreeze") federate.exit_freeze();


      //--------------------
      //-- SCHEDULED JOBS --
      //--------------------

      // Wait for the Time Advance Grant (TAG).
      P_1ST (main_thread_data_cycle, "environment") federate.wait_for_time_advance_grant();

      // Process all interactions that were received.
      P_1ST (main_thread_interaction_cycle, "environment") manager.process_interactions();

      // Process any deleted objects.
      P_1ST (main_thread_data_cycle, "environment") manager.process_deleted_objects();

      // Grab any new cyclic data from the other Federates that has arrived and
      // update the local state. (This is done down here to make sure we do
      // the copying AFTER the event loop has fired the reflect call-backs.)
      P_1ST (main_thread_data_cycle, "environment") manager.receive_cyclic_data();

      // Send any new cyclic and requeted data. Requested data would occur as
      // the result of another federate requesting an attribute value update.
      P_LAST (main_thread_data_cycle, "logging") manager.send_cyclic_and_requested_data();

      // Process the ownership requests.
      P_LAST (main_thread_data_cycle, "logging") manager.process_ownership();

      // Request to go to the next logical time step with a HLA
      // Time-Advance-Request (TAR).
      P_LAST (main_thread_data_cycle, "logging") federate.time_advance_request();

      // FIXME: This is for IMSim only. Needs to be moved into ExecutionControl.
      // Check to see if an interaction informed us that we are to
      // FREEZE the sim before entering the next logical frame.
      //P_LAST (main_thread_data_cycle, "logging") federate.check_freeze_time();

      // FIXME: This is for DIS only. Needs to be moved into ExecutionControl.
      // For DIS, check to see if federate master clicked freeze
      //P_LAST (main_thread_data_cycle, check_pause_job_offset, "logging") federate.check_pause( CHECK_PAUSE_DELTA );

      // Coordinate federates going to freeze mode.
      ("end_of_frame") federate.enter_freeze();


      //-------------------
      //-- SHUTDOWN JOBS --
      //-------------------
      P_LAST ("shutdown") federate.shutdown();
   }

 protected:
    double      data_cycle_time;
 
 private:
   // Do not allow the implicit copy constructor or assignment operator.
   IMSimSimObject( IMSimSimObject const & rhs );
   IMSimSimObject & operator=( IMSimSimObject const & rhs );

   // Do not allow the default constructor.
   IMSimSimObject();
};

#endif // IMSIM_SIM_OBJECT
