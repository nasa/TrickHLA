/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object that defines a JEOD refrence frame.
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines a
 *     mapping between a JEOD reference frame and a SpaceFOM reference frame.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: June 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/

// Include TrickHLA Packing object base simulation definition module.
#include "THLAPackingBase.sm"

// JEOD includes.
##include "environment/time/include/time_tt.hh"
##include "utils/ref_frames/include/ref_frame.hh"
##include "JEOD/JEODRefFrameState.hh"

// SpaceFOM include files.
##include "SpaceFOM/RefFrameLagComp.hh"
##include "SpaceFOM/RefFrameConditionalBase.hh"
##include "SpaceFOM/RefFrameOwnershipHandler.hh"
##include "SpaceFOM/RefFrameDeleted.hh"

//==========================================================================
// SIM_OBJECT: JEODRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
class JEODRefFrameSimObject : public TrickHLAPackingBaseSimObject {

  public:

   /* JEOD Reference Frame state in SpaceFOM parent frame. */
   jeod::RefFrameState ref_frame_state;

   /* HLA associated reference frames packing object. */
   SpaceFOM::JEODRefFrameState frame_packing;

   /* HLA lag compensation object. */
   SpaceFOM::RefFrameLagComp lag_compensation;

   /* HLA conditional object. */
   SpaceFOM::RefFrameConditionalBase conditional;

   /* HLA Ownership Handler object. */
   SpaceFOM::RefFrameOwnershipHandler ownership_handler;

   /* HLA RefFrame deleted object. */
   SpaceFOM::RefFrameDeleted deleted_callback;

   // SimObjct constructor.
   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   JEODRefFrameSimObject( jeod::TimeTT           & time_in,
                          SpaceFOM::RefFrameTree & frame_tree_ref,
                          unsigned short           _INIT   = P_HLA_INIT,
                          unsigned short           _UPDATE = 99 )
      : TrickHLAPackingBaseSimObject( _INIT ),
        frame_packing( time_in, ref_frame_state ),
        lag_compensation( frame_packing ),
        conditional( frame_packing ),
        frame_tree( frame_tree_ref ),
        time_tt(time_in)
   {    
      // Set the service references for the base class.
      packing_base_ptr     = &frame_packing;
      lag_comp_base_ptr    = &lag_compensation;
      conditional_base_ptr = &conditional;
      ownership_base_ptr   = &ownership_handler;
      deleted_base_ptr     = &deleted_callback;

      //
      // Default data jobs
      //
      
      //
      // Initialization jobs
      //
      P_INIT ("initialization") frame_tree.add_frame( &frame_packing );
      
      // This needs to run after the JEOD dynamics manager initializes the
      // simulation and before the federate sends the initialization data.
      P_UPDATE ("initialization") update();

      // Update the reference frame state at the environment high rate.
      (HIGH_RATE_ENV, "environment") update();
   }

   /* Target and parent frame accessor methods. */
   void set_frames( jeod::RefFrame * parent_in,
                    jeod::RefFrame * target_in )
   {
      set_parent( parent_in );
      set_target( target_in );
      return;
   }

   void set_target( jeod::RefFrame * target_in )
   {
      target_frame_ptr = target_in;
      return;
   }

   jeod::RefFrame * get_target()
   {
      return target_frame_ptr;
   }

   void set_parent( jeod::RefFrame * parent_in )
   {
      parent_frame_ptr = parent_in;
      return;
   }

   jeod::RefFrame * get_parent()
   {
      return parent_frame_ptr;
   }

   /* Update the SpaceFOM reference frame wrt. the specified parent frame. */
   void update () {
      
      // Check to see if this is a root reference frame.
      // If so, no update is necessary or even possible.
      if ( parent_frame_ptr != NULL ) {
         // Compute the target reference frame wrt. the specified parent frame.
         target_frame_ptr->compute_relative_state( *parent_frame_ptr, ref_frame_state );
      }

      // Set the time tag for this reference frame state.
      frame_packing.set_time((time_tt.trunc_julian_time * 86400.0));

      return;
   }

  protected:
   // Reference to the frame tree manager.
   SpaceFOM::RefFrameTree & frame_tree;

  private:
   jeod::TimeTT   & time_tt;
   jeod::RefFrame * parent_frame_ptr;
   jeod::RefFrame * target_frame_ptr;

   // This object is not copyable
   JEODRefFrameSimObject( const JEODRefFrameSimObject & );
   JEODRefFrameSimObject & operator=( const JEODRefFrameSimObject & );

};
