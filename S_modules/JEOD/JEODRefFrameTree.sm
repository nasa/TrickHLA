/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard reference frames.
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines the
 *     standard SpaceFOM/JEOD reference frame tree.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: June 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/

##include <iostream>
##include "utils/ref_frames/include/ref_frame_state.hh"

// TrickHLA include files.
##include "TrickHLA/Manager.hh"

// SpaceFOM include files.
##include "SpaceFOM/ExecutionControl.hh"

#include "SpaceFOM/RefFrameTreeBase.sm"

//==========================================================================
// SIM_OBJECT: JEODRefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
class JEODRefFrameTreeSimObject : public SpaceFOMRefFrameTreeBaseSimObject {

  public:

   // SpaceFOM Reference Frame Tree constructor.
   // _ADD and _BUILD phases need to be less than 60, when TrickHLA is initialized.
   JEODRefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                              SpaceFOM::ExecutionControl & exec_cntrl_in,
                              jeod::TimeTT               & time_tt_in,
                              jeod::DynManager           & dyn_manager_in,
                              jeod::Planet               & sun_in,
                              jeod::Planet               & earth_in,
                              jeod::Planet               & moon_in,
                              jeod::Planet               & mars_in,
                              unsigned short               _CONFIG = 35,
                              unsigned short               _BUILD  = (P_HLA_INIT+1) )
      : SpaceFOMRefFrameTreeBaseSimObject( thla_manager_in, exec_cntrl_in, _BUILD ),
        time_tt( time_tt_in ),
        dyn_manager( dyn_manager_in ),
        sun( sun_in ),
        earth( earth_in ),
        moon( moon_in ),
        mars( mars_in )
   {
      //
      // Default data jobs
      //

      // We need to subscribe to the desired reference frames to insure that
      // JEOD updates them.
      P_CONFIG ("initialization") subscribe_to_frames();
      P_CONFIG ("initialization") solar_system_barycenter.set_frames( ssbary_ptr, ssbary_ptr );
      P_CONFIG ("initialization") sun_inertial.set_frames( ssbary_ptr, &sun.inertial );
      P_CONFIG ("initialization") earth_moon_barycenter.set_frames( ssbary_ptr, embary_ptr );
      P_CONFIG ("initialization") earth_centered_inertial.set_frames( embary_ptr, &earth.inertial );
      P_CONFIG ("initialization") moon_centered_inertial.set_frames( embary_ptr, &moon.inertial );
      P_CONFIG ("initialization") mars_centered_inertial.set_frames( ssbary_ptr, &mars.inertial );
      P_CONFIG ("initialization") earth_centered_fixed.set_frames( &earth.inertial, &earth.pfix );
      P_CONFIG ("initialization") moon_centered_fixed.set_frames( &moon.inertial, &moon.pfix );
      P_CONFIG ("initialization") mars_centered_fixed.set_frames( &mars.inertial, &mars.pfix );
   }


   // Subscribe to the needed JEOD reference frames.
   void subscribe_to_frames()
   {
      // We can start with the planetary frames.
      sun.inertial.subscribe();
      earth.inertial.subscribe();
      earth.pfix.subscribe();
      moon.inertial.subscribe();
      moon.pfix.subscribe();
      mars.inertial.subscribe();
      mars.pfix.subscribe();

      // We need to lookup the barycentric frames.
      ssbary_ptr = dyn_manager.find_ref_frame ("SSBary.inertial");
      // Must have a reference to the Solar System Barycenter frame.
      if ( ssbary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: SSBary.inertial\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }
      embary_ptr = dyn_manager.find_ref_frame ("EMBary.inertial");
      if ( embary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: EMBary.inertial\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Subscribe to the barycenter frames.
      ssbary_ptr->subscribe();
      embary_ptr->subscribe();

      return;
   }


  public:

   // References to working SpaceFOM reference frames.
   SpaceFOM::JEODRefFrameState * ssbary_frame_ptr;
   SpaceFOM::JEODRefFrameState * sun_frame_ptr;
   SpaceFOM::JEODRefFrameState * embary_frame_ptr;
   SpaceFOM::JEODRefFrameState * earth_frame_ptr;
   SpaceFOM::JEODRefFrameState * moon_frame_ptr;
   SpaceFOM::JEODRefFrameState * mars_frame_ptr;
   SpaceFOM::JEODRefFrameState * earth_pfix_frame_ptr;
   SpaceFOM::JEODRefFrameState * moon_pfix_frame_ptr;
   SpaceFOM::JEODRefFrameState * mars_pfix_frame_ptr;


  protected:

   // Configure the reference frame tree.
   void configure_tree()
   {
      std::ostringstream errmsg;

      // Check for objects allocation.
      if ( (thla_manager.obj_count == 0) || (thla_manager.objects == NULL) ) {
         errmsg << "JEODRefFrameTreeSimObject::configure_tree():" << __LINE__
                << " ERROR: The TrickHLAManager Object array has not been allocated!\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Setup the Solar System barycenter frame as the root reference frame.
      ssbary_frame_ptr->base_config( false,
                                     "solar_system_barycenter",
                                     "frame_packing",
                                     "SolarSystemBarycentricInertial" );

      // Set the Solar System barycenter frame as the root reference frame.
      exec_cntrl.root_ref_frame = ssbary_frame_ptr;

      // Setup the Sun inertial reference frame.
      sun_frame_ptr->base_config( false,
                                  "sun_inertial",
                                  "frame_packing",
                                  "SunCentricInertial",
                                  "SolarSystemBarycentricInertial",
                                  ssbary_frame_ptr ); 

      // Setup the Earth-Moon barycentric inertial reference frame.
      embary_frame_ptr->base_config( false,
                                     "earth_moon_barycenter",
                                     "frame_packing",
                                     "EarthMoonBarycentricInertial",
                                     "SolarSystemBarycentricInertial",
                                     ssbary_frame_ptr );

      // Setup the Earth inertial reference frame.
      earth_frame_ptr->base_config( false,
                                    "earth_centered_inertial",
                                    "frame_packing",
                                    "EarthCentricInertial",
                                    "EarthMoonBarycentricInertial",
                                    embary_frame_ptr );

      // Setup the Moon inertial reference frame.
      moon_frame_ptr->base_config( false,
                                   "moon_centered_inertial",
                                   "frame_packing",
                                   "MoonCentricInertial",
                                   "EarthMoonBarycentricInertial",
                                   embary_frame_ptr );

      // Setup the Mars inertial reference frame.
      mars_frame_ptr->base_config( false,
                                   "mars_centered_inertial",
                                   "frame_packing",
                                   "MarsCentricInertial",
                                   "SolarSystemBarycentricInertial",
                                   ssbary_frame_ptr );

      // Setup the Earth fixed reference frame.
      earth_pfix_frame_ptr->base_config( false,
                                         "earth_centered_fixed",
                                         "frame_packing",
                                         "EarthCentricFixed",
                                         "EarthMJ2000Eq",
                                         earth_frame_ptr );

      // Setup the Moon fixed reference frame.
      moon_pfix_frame_ptr->base_config( false,
                                        "moon_centered_fixed",
                                        "frame_packing",
                                        "MoonCentricFixed",
                                        "MoonCentricInertial",
                                        moon_frame_ptr );

      // Setup the Mars fixed reference frame.
      mars_pfix_frame_ptr->base_config( false,
                                        "mars_centered_fixed",
                                        "frame_packing",
                                        "MarsCentricFixed",
                                        "MarsCentricInertial",
                                        mars_frame_ptr );
   }

    // Need for scheduled job persitence.
   jeod::TimeTT & time_tt;
   jeod::DynManager & dyn_manager;
   jeod::Planet & sun;
   jeod::Planet & earth;
   jeod::Planet & moon;
   jeod::Planet & mars;

   // Need additional reference frames not directly associated with a
   // planet.  These are for the two principal barycentric frames for
   // the solar system (SSBary) and the Earth-Moon (EMBary)
   jeod::RefFrame * ssbary_ptr; ///< @trick_units{--} Solar system barycenter.
   jeod::RefFrame * embary_ptr; ///< @trick_units{--} Earth-Moon system barycenter.
   
  private:
   // This object is not copyable
   JEODRefFrameTreeSimObject( const JEODRefFrameTreeSimObject & );
   JEODRefFrameTreeSimObject & operator=( const JEODRefFrameTreeSimObject & );

};


//==========================================================================
// SIM_OBJECT: JEODRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
#include "JEOD/JEODRefFrame.sm"


//==========================================================================
// Instantiate the reference frame tree and constituent frames.
//==========================================================================

// Build the SpaceFOM Reference Frame Tree using JEOD reference frames.
JEODRefFrameTreeSimObject ref_frame_tree( THLA.manager,
                                          THLA.execution_control,
                                          jeod_time.time_tt,
                                          dynamics.dyn_manager,
                                          sun.planet,
                                          earth.planet,
                                          moon.planet,
                                          mars.planet );

// Instantiate the standard JEOD/SpaceFOM reference frames for the tree.
JEODRefFrameSimObject solar_system_barycenter( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject sun_inertial( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject earth_moon_barycenter( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject earth_centered_inertial( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject moon_centered_inertial( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject mars_centered_inertial( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject earth_centered_fixed( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject moon_centered_fixed( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
JEODRefFrameSimObject mars_centered_fixed( jeod_time.time_tt, ref_frame_tree.frame_tree, P_HLA_INIT, 40 );
