/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard physical entity.
 *---------------------------------------------------------------------------*
 * This is a Simulation Definition (S_define) module that defines the
 * standard SpaceFOM PhysicalEntity base simulation object instance.
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: December 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/
 

//==========================================================================
// SIM_OBJECT: SpaceFOMDynamicalEntitySimObject - A SpaceFOM DynamicalEntity
// instance simulation object definition.
//==========================================================================

// SpaceFOM include files.
##include "SpaceFOM/DynamicalEntity.hh"
##include "SpaceFOM/DynamicalEntityConditionalBase.hh"
##include "SpaceFOM/DynamicalEntityLagComp.hh"
##include "SpaceFOM/DynamicalEntityOwnershipHandler.hh"
##include "SpaceFOM/DynamicalEntityDeleted.hh"

// Include TrickHLA Packing object base simulation definition module.
#include "THLAPackingBase.sm"

class SpaceFOMDynamicalEntitySimObject : public TrickHLAPackingBaseSimObject {

  public:

   // DynamicalEntity data.
   SpaceFOM::PhysicalEntityData  & pe_data;
   SpaceFOM::DynamicalEntityData & de_data;

   /* HLA associated reference frames packing object. */
   SpaceFOM::DynamicalEntity entity_packing;

   /* HLA conditional object. */
   SpaceFOM::DynamicalEntityConditionalBase conditional;

   /* HLA lag compensation object. */
   SpaceFOM::DynamicalEntityLagComp lag_compensation;

   /* HLA Ownership Handler object. */
   SpaceFOM::DynamicalEntityOwnershipHandler ownership_handler;

   /* HLA PhysicalEntity deleted object. */
   SpaceFOM::DynamicalEntityDeleted deleted_callback;

   // SimObject constructor.
   SpaceFOMDynamicalEntitySimObject( PhysicalEntityData  & pe,
                                     DynamicalEntityData & de,
                                     unsigned short        _INIT = P_HLA_INIT  )
   : TrickHLAPackingBaseSimObject( _INIT ),
     pe_data(pe),
     de_data(de),
     entity_packing( pe, de ),
     conditional(entity_packing),
     lag_compensation( entity_packing )
   {
      // Set the service references for the base class.
      packing_base_ptr     = &entity_packing;
      lag_comp_base_ptr    = &lag_compensation;
      conditional_base_ptr = &conditional;
      ownership_base_ptr   = &ownership_handler;
      deleted_base_ptr     = &deleted_callback;

   }

  private:

   // This object is not copyable
   SpaceFOMDynamicalEntitySimObject( SpaceFOMDynamicalEntitySimObject const & );
   SpaceFOMDynamicalEntitySimObject & operator=( SpaceFOMDynamicalEntitySimObject const & );

};
