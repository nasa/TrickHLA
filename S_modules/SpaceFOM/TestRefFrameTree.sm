/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard reference frames.
 *---------------------------------------------------------------------------*
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines
 *     the standard SpaceFOM reference frame tree.)
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: July 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/

//==========================================================================
// SIM_OBJECT: RefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================

// TrickHLA include files.
##include "TrickHLA/DebugHandler.hh"
##include "TrickHLA/Manager.hh"

// SpaceFOM include files.
##include "SpaceFOM/ExecutionControl.hh"
##include "SpaceFOM/RefFrameData.hh"
##include "SpaceFOM/RefFrameBase.hh"

#include "SpaceFOM/RefFrameTreeBase.sm"

//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameTreeSimObject - An example reference frame tree
// simulation object definition.
//==========================================================================
class SpaceFOMTestRefFrameTreeSimObject : public SpaceFOMRefFrameTreeBaseSimObject {

  public:

   // Working SpaceFOM reference frames.
   SpaceFOM::RefFrameData root_frame_data;
   SpaceFOM::RefFrameData vehicle_frame_data;

   // References to working SpaceFOM reference frames.
   SpaceFOM::RefFrameBase * root_frame_ptr;
   SpaceFOM::RefFrameBase * vehicle_frame_ptr;

   // _ADD and _BUILD phases need to be less than 60, when TrickHLA is initialized.
   SpaceFOMTestRefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                                      SpaceFOM::ExecutionControl & exec_cntrl_in,
                                      unsigned short               _BUILD = (P_HLA_INIT+1) )
      : SpaceFOMRefFrameTreeBaseSimObject(thla_manager_in, exec_cntrl_in, _BUILD ),
        root_frame_ptr( NULL ),
        vehicle_frame_ptr( NULL )
   {
      return;
   }

  private:
   // Define the interface to configure the reference frame tree.
   void configure_tree()
   {
      // Check for objects allocation.
      if ( (thla_manager.obj_count == 0) || (thla_manager.objects == NULL) ) {
         std::ostringstream errmsg;
         errmsg << "SpaceFOMRefFrameTreeSimObject::configure_tree():" << __LINE__
                << " ERROR: The TrickHLAManager Object array has not been allocated!\n";
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Setup the root reference frame.
      root_frame_ptr->base_config( false,
                                   "root_ref_frame",
                                   "frame_packing",
                                   "RootFrame" );

      // Set the root reference frame in the ExCO.
      exec_cntrl.root_ref_frame = root_frame_ptr;

      // Setup the Sun inertial reference frame.
      vehicle_frame_ptr->base_config( false,
                                      "vehicle_frame",
                                      "frame_packing",
                                      "FrameA",
                                      "RootFrame",
                                      root_frame_ptr );
   }

  private:
   // This object is not copyable
   SpaceFOMTestRefFrameTreeSimObject( SpaceFOMTestRefFrameTreeSimObject const & );
   SpaceFOMTestRefFrameTreeSimObject & operator=( SpaceFOMTestRefFrameTreeSimObject const & );
};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
#include "SpaceFOM/RefFrame.sm"


//==========================================================================
// Instantiate the reference frame tree and constituent frames.
//==========================================================================

// SimObject used for root reference frame discovery.
SpaceFOMTestRefFrameTreeSimObject ref_frame_tree( THLA.manager,
                                                  THLA.execution_control );
SpaceFOMRefFrameSimObject root_ref_frame( ref_frame_tree.frame_tree, ref_frame_tree.root_frame_data );
SpaceFOMRefFrameSimObject ref_frame_A( ref_frame_tree.frame_tree, ref_frame_tree.vehicle_frame_data );


//==========================================================================
// Create the THLA connections for the SpaceFOM Reference Frame Tree.
//==========================================================================
void create_connections() {

   // Make the connections for the root and child frame in the reference frame tree.
   ref_frame_tree.root_frame_ptr = &root_ref_frame.frame_packing;
   ref_frame_tree.vehicle_frame_ptr = &ref_frame_A.frame_packing;

}
