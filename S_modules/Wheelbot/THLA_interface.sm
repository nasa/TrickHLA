/*****************************************************************************
 * PURPOSE:
 *    (This is a Simulation Definition 'S_define' module that defines
 *     the TrickHLA and initialization related jobs.)
 *
 * LIBRARY DEPENDENCIES:
 *    ((../source/SpaceFOM/RefFrameState.cpp)
 *     (../source/TrickHLA/Federate.cpp)
 *     (../source/TrickHLA/Manager.cpp))
 ****************************************************************************/

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        0.250 // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME 0.050 // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_INIT   60    // HLA initialization phase.
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_LATE   65534 // HLA late job phase.

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}

// TrickHLA include files.
##include "TrickHLA/Federate.hh"
##include "TrickHLA/Manager.hh"

// SpaceFOM include files.
##include "SpaceFOM/RefFrameState.hh"

//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM/SpaceFOM.sm"

SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME,
                        THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY,
                        P_HLA_INIT,
                        P_HLA_LATE );


//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class THLAInitSimObject : public Trick::SimObject {

 public:

   THLAInitSimObject( TrickHLA::Manager  & thla_mngr,
                      TrickHLA::Federate & thla_fed ) 
      : thla_manager( thla_mngr ),
        thla_federate( thla_fed )
   {
      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60 
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();
      
      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();
      
      // Do some processing here if needed...
      
      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();
   }

 private:
   TrickHLA::Manager  & thla_manager;
   TrickHLA::Federate & thla_federate;
	
   // Do not allow the implicit copy constructor or assignment operator.
   THLAInitSimObject( THLAInitSimObject const & rhs );
   THLAInitSimObject & operator=( THLAInitSimObject const & rhs );
	
   // Do not allow the default constructor.
   THLAInitSimObject();

};

THLAInitSimObject THLA_INIT( THLA.manager, THLA.federate);


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameTreeSimObject - An example reference frame tree
// simulation object definition.
//==========================================================================
class SpaceFOMRefFrameTreeSimObject : public Trick::SimObject {

  public:
   /* Reference frame data. */
   RefFrameData root_frame_data;
   RefFrameData frame_A_data;

   SpaceFOMRefFrameTreeSimObject()
   {
      return;
   }

  private:
   // This object is not copyable
   SpaceFOMRefFrameTreeSimObject( SpaceFOMRefFrameTreeSimObject const & );
   SpaceFOMRefFrameTreeSimObject & operator=( SpaceFOMRefFrameTreeSimObject const & );
};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
class SpaceFOMRefFrameSimObject : public Trick::SimObject {

  public:
   
   /* HLA associated reference frames packing object. */
   SpaceFOM::RefFrameState frame_packing;

   SpaceFOMRefFrameSimObject( RefFrameData & frame_data_ptr,
                              unsigned short _INIT = 59  )
   {
      // Set the reference to the reference frame.
      this->ref_frame_data_ptr = &frame_data_ptr;
      
      //
      // Initialization jobs
      //
      P_INIT ("initialization") frame_packing.configure( ref_frame_data_ptr );
      P_INIT ("initialization") frame_packing.initialize();
   }

  private:
   RefFrameData * ref_frame_data_ptr;

   // This object is not copyable
   SpaceFOMRefFrameSimObject( SpaceFOMRefFrameSimObject const & );
   SpaceFOMRefFrameSimObject & operator=( SpaceFOMRefFrameSimObject const & );

};
