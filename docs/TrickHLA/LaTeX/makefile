#####################################################################
# Makefile:
#    This is a template makefile for maintaining the template LaTeX
# documentation generation files and process.
#
#####################################################################
# Creation:
#    Author: David Hammen
#    Date:   25 October 2005
#--------------------------------------------------------------------
# Modified:
#    Author: Edwin Z. Crues
#    Date:   26 October 2005
#    Description: Added autogenerated documentation options.
#--------------------------------------------------------------------
# Modified:
#    Author: Edwin Z. Crues
#    Date:   21 December 2005
#    Description: Added links for dynamics environment files.
#--------------------------------------------------------------------
# Modified:
#    Author: David Hammen and Susan Lim
#    Date:   April 2006
#    Description: Added Meatball.pdf for cover/title pages.
#--------------------------------------------------------------------
# Modified:
#    Author: David Hammen and Susan Lim
#    Date:   May 2006
#    Description: Added trickhlacover.sty and logic for data tex files.
#--------------------------------------------------------------------
# Modified:
#    Author: David Hammen
#    Date:   July 2006
#    Description: Added paths.def generation
#                 Added longtable.sty, .dvi as DYNENV_LATEX_FILES.
#--------------------------------------------------------------------
# Modified:
#    Author: Dan Dexter
#    Date:   February 2010
#    Description: Modified for use with TrickHLA.
#                 User must set TRICKHLA_HOME environment variable.
#####################################################################
#
# To get a desription of the arguments accepted by this makefile,
# type 'make help'
#
#####################################################################

#####################################################################
# Known Bugs and Limitations:
# - Reprocesses LaTeX documents even when they are up to date.
# - trick_xml2tex script and longtable.sty, .dvi are now in local bin
#   but should be in Trick.
#####################################################################

#####################################################################
##                       DOCUMENT DEFINITIONS                      ##
#####################################################################

MODEL_NAME = TrickHLA

#
# Build the standard documentation files from the model name.
#
DOCUMENTS = ${MODEL_NAME}\
            ${MODEL_NAME}Reqt\
            ${MODEL_NAME}IVV\
            ${MODEL_NAME}Spec\
            ${MODEL_NAME}User


######################################################
# Specify template, source and document directories. #
######################################################
TEMPLATE_DIR = ${TRICKHLA_HOME}/docs/TrickHLA/LaTeX/template
TOP_DIR      = ..
INC_DIR      = $(TOP_DIR)/include
SRC_DIR      = $(TOP_DIR)/src
DATA_DIR     = $(TOP_DIR)/data
XML_DIR      = $(TOP_DIR)/xml
TEX_DIRS     = include src xml data

# INST_DIR: directory in which the generated pdf files will be installed
INST_DIR = ..

# PDF_DIR: directory in which the generated pdf files will be tested.
# The install target changes this to INST_DIR
PDF_DIR  = .


###############################
# Platform specific behavior. #
###############################
ifeq ($(shell uname -s), Darwin)
LATEX_BIN ?= /usr/local/texlive/2024/bin/universal-darwin/
else
LATEX_BIN ?= /usr/local/bin/
endif


######################################
# Define commands and command paths. #
######################################
PDFLATEX = $(LATEX_BIN)pdflatex
BIBTEX   = $(LATEX_BIN)bibtex


###########################################
# Derive the document product file names. #
###########################################
# TrickHLA environment LaTeX style, bibliography, perl scripts, etc.
# (listed alphabetically)
TRICKHLAENV_LATEX_FILES = \
	trickhlacover.sty \
	trickhlaenv.bib \
	trickhlaenv.sty \
	trickhlamath.sty \
	ifvtex.sty \
	longtable.dvi \
	longtable.sty \
	make_labels.pl \
	Meatball.pdf \
	ps4pdf.sty \
	relpath.pl \
	trick_xml2tex

# Model documenation style sheet
STYLE_SHEET = ${MODEL_NAME}.sty

# LaTeX file names are derived from the document names
TEX_FILES = $(addsuffix .tex,$(DOCUMENTS))

# Auxiliary information file names are derived from the document names
AUX_FILES = $(addsuffix .aux,$(DOCUMENTS))

# PDF file names are derived from the LaTeX file names
PDF_FILES = $(subst .tex,.pdf,$(TEX_FILES))

# Bibliography file names are also derived from the LaTeX file names
BBL_FILES = $(subst .tex,.bbl,$(TEX_FILES))


##############################################
# Derive the document model code file names. #
##############################################
INC_FILES         = $(notdir $(wildcard $(INC_DIR)/*.h))
INC_TEX_FILES     = $(patsubst %,%.tex,$(addprefix include/,$(INC_FILES)))
INC_XML_FILES     = $(patsubst %,%.xml,$(addprefix $(XML_DIR)/,$(INC_FILES)))
INC_XML_TEX_FILES = $(patsubst %,%.tex,$(addprefix xml/,$(INC_FILES)))

SRC_FILES         = $(notdir $(wildcard $(SRC_DIR)/*.c))
SRC_TEX_FILES     = $(patsubst %,%.tex,$(addprefix src/,$(SRC_FILES)))
SRC_XML_FILES     = $(patsubst %.c,%.xml,$(addprefix $(XML_DIR)/,$(SRC_FILES)))
SRC_XML_TEX_FILES = $(patsubst %.c,%.tex,$(addprefix xml/,$(SRC_FILES)))

DATA_FILES        = $(notdir $(wildcard $(DATA_DIR)/*.d))
DATA_TEX_FILES    = $(patsubst %,%.tex,$(addprefix data/,$(DATA_FILES)))


###########################################
# Collect all the autogenerated TeX files #
###########################################
AUTO_TEX_FILES  = $(INC_TEX_FILES) $(INC_XML_TEX_FILES)
AUTO_TEX_FILES += $(SRC_TEX_FILES) $(SRC_XML_TEX_FILES)
AUTO_TEX_FILES += $(DATA_TEX_FILES)

###################################
# Define the compilation targets. #
###################################

default: all

all: $(TEX_DIRS) pdfs
	@echo " "
	@echo Generated documents: $(DOCUMENTS)

install: install_setup all
	@echo "Installing documents in $(INST_DIR)"
	@cp $(PDF_FILES) $(INST_DIR)

# install_setup is an internal target of install.
# it wipes out and then regenerates the pdf files such that
# hyperlinks are relative to the installation directory.
install_setup: clean_def clean_pdf
	make PDF_DIR=$(INST_DIR) paths.def


IO: xml $(INC_XML_TEX_FILES) $(SRC_XML_TEX_FILES)

verbatim: src $(SRC_TEX_FILES) include $(INC_TEX_FILES) data $(DATA_TEX_FILES)

pdfs: $(PDF_FILES)

$(DOCUMENTS): % : %.pdf
	@echo " "
	@echo Generated document: $@

$(TEX_DIRS):
	@ mkdir -p $@
	@ echo Created $@

#
# Generate the PDF files from the LaTeX files.
#
$(PDF_FILES): %.pdf : %.tex %.bbl %.aux
	$(PDFLATEX) $(basename $(@F)).tex
	$(PDFLATEX) $(basename $(@F)).tex

# Force a recompile if the style sheet or any top-level files have changed.
$(PDF_FILES): $(STYLE_SHEET) $(TRICKHLAENV_LATEX_FILES)

#
# Have BibTeX build the bibliography file.
#
$(BBL_FILES): %.bbl : $(TRICKHLAENV_LATEX_FILES) %.tex %.aux
	@echo processing $(basename $(@F))
	$(BIBTEX) $(basename $(@F))

#
# The auxiliary files are needed by BibTeX to build .bbl files.
#
$(AUX_FILES): %.aux : %.tex $(AUTO_TEX_FILES)
	$(PDFLATEX) $(<F)

# Specify dependencies on the .def files.
$(PDF_FILES)          : def_setup
${MODEL_NAME}Spec.pdf : ${MODEL_NAME}Reqt.def
${MODEL_NAME}IVV.pdf  : ${MODEL_NAME}Reqt.def

# def_setup generates empty .def files to avoid circularity problems.
def_setup:
	@if [ ! -f ${MODEL_NAME}Reqt.def ] ; then \
	  echo Creating empty ${MODEL_NAME}Reqt.def; \
	  touch ${MODEL_NAME}Reqt.def; \
	fi

# Build the requirements definition file used in the Spec and IVV documents.
$(MODEL_NAME)Reqt.def: $(MODEL_NAME)Reqt.pdf
	perl $(TEMPLATE_DIR)/make_labels.pl $(MODEL_NAME)Reqt


#
# Build the paths.defs file used by the style sheet ${MODEL_NAME}.sty
# Note that the path to the top is relative to the $(PDF_DIR).
#
paths.def: $(TRICKHLAENV_LATEX_FILES)
	@ totop=`./relpath.pl ${TRICKHLA_HOME} $(PDF_DIR)`; \
	/bin/echo "\newcommand\TRICKHLAHOME{$$totop}" > $@
	@ echo Created $@

# Specify dependencies on the paths.def file.
$(AUX_FILES) : paths.def
$(PDF_FILES) : paths.def


#
# Build the verbatim source files.
#
$(SRC_TEX_FILES): %.tex : $(TOP_DIR)/%
	@echo -e "\\\begin{verbatim}" >> $@
	@cat $< >> $@
	@echo -e "\\\end{verbatim}" >> $@

#
# Build the verbatim header files.
#
$(INC_TEX_FILES): %.tex : $(TOP_DIR)/%
	@echo -e "\\\begin{verbatim}" >> $@
	@cat $< >> $@
	@echo -e "\\\end{verbatim}" >> $@

#
# Build the verbatim data files.
#
$(DATA_TEX_FILES): %.tex : $(TOP_DIR)/%
	@echo -e "\\\begin{verbatim}" >> $@
	@cat $< >> $@
	@echo -e "\\\end{verbatim}" >> $@

#
# Build the header and module interface files.
#
$(INC_XML_TEX_FILES) : %.tex : $(TOP_DIR)/%.xml
	trick_xml2tex -o xml/$(notdir $(@)) $<

$(SRC_XML_TEX_FILES) : %.tex : $(TOP_DIR)/%.xml
	trick_xml2tex -o xml/$(notdir $(@)) $<

#
# Build the XML files that describe the header and module interfaces.
#
$(INC_XML_FILES) : $(XML_DIR)/%.h.xml : $(INC_DIR)/%.h
	@echo " "
	@echo Generating Trick header interfaces
	cd $(INC_DIR); ICG $(notdir $(<))

$(SRC_XML_FILES) : $(XML_DIR)/%.xml : $(SRC_DIR)/%.c
	@echo " "
	@echo Generating Trick module interfaces
	cd $(SRC_DIR); MIS $(notdir $(<))

#
# TrickHLA LaTeX environment files to link to.
#
links: $(TRICKHLAENV_LATEX_FILES)
$(TRICKHLAENV_LATEX_FILES):
	ln -sf $(TEMPLATE_DIR)/$@ $@


################################
# Define the cleaning targets. #
################################
clean_aux:
	@echo Removing the LaTeX auxiliary files.
	rm -f *.aux *.bbl *.blg *.lof *.log *.lot *.out *.toc

clean_def:
	@echo Removing the generated definition files.
	rm -f paths.def
	rm -f ${MODEL_NAME}Reqt.def

clean_tex: clean_inc clean_src clean_data clean_xml
	@echo Removed autogenerated TeX files.

clean_links:
	@echo Removed linked TrickHLA environment LaTeX files.
	@rm -f $(TRICKHLAENV_LATEX_FILES)

clean_xml:
	@echo Removed TeX generated from XML.
	@rm -rf xml

clean_src:
	@echo Removed generated verbatim files for source code
	@rm -rf src

clean_inc:
	@echo Removed generated verbatim files for include files
	@rm -rf include

clean_data:
	@echo Removed generated verbatim files for data files
	@rm -rf data

clean: clean_aux clean_def
	@echo Removed generated DVI files
	@rm -f *.dvi

clean_pdf:
	@echo Removing output PDF files
	@rm -f $(PDF_FILES)

real_clean: clean_tex clean_links clean clean_pdf
	@echo Removed all LaTeX and BibTeX produced files.

spotless: real_clean


###################################
# Define the information targets. #
###################################
help:
	@echo -e "\n\
Documentation Make Options:\n\
    make            - Processes all LaTeX document files:\n\
                      $(TEX_FILES)\n\
\n\
    make clean_tex  - Deletes all autogenerated TeX files\n\
\n\
    make clean_data - Deletes TeX directory generated from data files\n\
\n\
    make clean_inc  - Deletes TeX directory generated from include files\n\
\n\
    make clean_src  - Deletes TeX directory generated from src files\n\
\n\
    make clean_xml  - Deletes TeX directory generated from XML directory\n\
\n\
    make clean_aux  - Deletes all auxiliary files\n\
\n\
    make clean_def  - Deletes the generated requirements definition file\n\
\n\
    make clean      - Deletes all auxiliary files and dvi files\n\
\n\
    make clean_pdf  - Deletes all PDF files\n\
\n\
    make install    - Install the document (default INST_DIR=../)\n\
\n\
    make real_clean - Deletes all generated files\n\
\n\
    make spotless   - Deletes all generated files\n\
\n\
    make verbatim   - Create the verbatim source and header LaTeX files.\n\
\n\
    make IO         - Create the structure and module interface LaTeX files.\n"


