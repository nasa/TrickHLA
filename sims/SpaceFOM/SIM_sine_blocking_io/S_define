//==========================================================================
// SpaceFOM: Sine wave simulation to test the TrickHLA blocking I/O
// data exchange APIs.
//==========================================================================
// Description:
// This is a simulation definition file (S_define) that provides an example
// of an SpaceFOM compliant federate that services all SpaceFOM roles.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================
#include "sim_objects/default_trick_sys.sm"

//=============================================================================
// Define the job calling intervals.
//=============================================================================
#define DYN_RATE  0.250 // The propagation rate of the reference object.
#define LOG_CYCLE 0.250 // Data Logging Rate.

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        0.250 // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME 0.050 // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_EARLY             1 // HLA early job phase.
#define P_SF_INIT_EPOCH_RRF    55 // SpaceFOM ExCO epoch and root reference frame phase.
#define P_HLA_INIT             60 // HLA initialization phase.
#define P_SF_INIT_PRE_MPI      65 // SpaceFOM Pre-Multi Phase initialization phase.
#define P_SF_INIT_POST_MPI    500 // SpaceFOM Post-Multi Phase initialization phase.
#define P_HLA_LATE          65534 // HLA late job phase.


//==========================================================================
// TrickHLA and SpaceFOM include files used in SimObject definitions or
// for input file instantiations.
//==========================================================================
##include "trick/integrator_c_intf.h"

// TrickHLA includes.
##include "TrickHLA/Federate.hh"
##include "TrickHLA/Manager.hh"
##include "TrickHLA/SimTimeline.hh"
##include "TrickHLA/ScenarioTimeline.hh"

// Sine model includes.
##include "sine/include/SineData.hh"
##include "sine/include/SinePacking.hh"

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM/SpaceFOM.sm"


//==========================================================================
// SIM_OBJECT: THLAFed - Support for blocking I/O data exchanges.
//==========================================================================
#include "THLAFed.sm"


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameTreeSimObject - An example reference frame
// tree simulation object definition.
//==========================================================================
#include "SpaceFOM/TestRefFrameTree.sm"


//=============================================================================
// SIM_OBJECT: BlockingIOAnalyticSineSimObj
// Sim-object for an analytic solution of a sine wave with blocking I/O
// data exchanges.
//=============================================================================
class BlockingIOAnalyticSineSimObj : public THLAFedSimObject {

 public:
   TrickHLAModel::SineData    truth_data;
   TrickHLAModel::SineData    sim_data;
   TrickHLAModel::SinePacking packing;

   BlockingIOAnalyticSineSimObj( TrickHLA::Federate & thla_fed )
      : THLAFedSimObject( thla_fed )
   {
      // Note: Make sure to initialize the data before it gets sent in
      // the THLA_INIT simulation object.
      //
      // TrickHLA API data flow, sending data:   sim-data --> lag-comp-data --> packing-data
      // TrickHLA API data flow, receiving data: packing-data --> lag-comp-data --> sim-data
      P50 ("initialization") packing.configure( &sim_data );
      P50 ("initialization") packing.initialize();

      // HLA Data will only be received if it is remotely owned by another federate.
      (THLA_DATA_CYCLE_TIME, "scheduled") federate.wait_to_receive_blocking_io_data( "A-side-Federate.Sine.blocking_io" );

      (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      (DYN_RATE, "scheduled") sim_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") sim_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      (THLA_DATA_CYCLE_TIME, "scheduled") sim_data.adjust_phase( THLA.execution_control.get_scenario_time() );

      // HLA Data will only be sent if this federate owns it.
      (THLA_DATA_CYCLE_TIME, "scheduled") federate.send_blocking_io_data( "A-side-Federate.Sine.blocking_io" );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   BlockingIOAnalyticSineSimObj( BlockingIOAnalyticSineSimObj const & rhs );
   BlockingIOAnalyticSineSimObj & operator=( BlockingIOAnalyticSineSimObj const & rhs );

   // Do not allow the default constructor.
   BlockingIOAnalyticSineSimObj();
};


//=============================================================================
// SIM_OBJECT: BlockingIOPropagatedSineSimObj
// Sim-object for a propagated solution of a sine wave with blocking I/O
// data exchanges.
//=============================================================================
class BlockingIOPropagatedSineSimObj : public THLAFedSimObject {

 public:
   TrickHLAModel::SineData    truth_data;
   TrickHLAModel::SineData    sim_data;
   TrickHLAModel::SinePacking packing;

   BlockingIOPropagatedSineSimObj( TrickHLA::Federate & thla_fed )
      : THLAFedSimObject( thla_fed )
   {
      // Note: Make sure to initialize the data before it gets sent in
      // the THLA_INIT simulation object.
      //
      // TrickHLA API data flow, sending data:   sim-data --> lag-comp-data --> packing-data
      // TrickHLA API data flow, receiving data: packing-data --> lag-comp-data --> sim-data
      P50 ("initialization") packing.configure( &sim_data );
      P50 ("initialization") packing.initialize();

      // HLA Data will only be received if it is remotely owned by another federate.
      (THLA_DATA_CYCLE_TIME, "scheduled") federate.wait_to_receive_blocking_io_data( "P-side-Federate.Sine.blocking_io" );

      /*
       * -- Propagate the true sine state.
       */
      (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      // HLA Data will only be sent if this federate owns it.
      (THLA_DATA_CYCLE_TIME, "scheduled") federate.send_blocking_io_data( "P-side-Federate.Sine.blocking_io" );

      /*
       * -- Numerically propagate the simulated sine state
       */
      ("derivative") sim_data.compute_derivative( get_integ_time() );
      ("integration") trick_ret = sim_data.integration();

      /*
       * The time is off by 0.005 seconds (DYN_RATE / 2) because the derivative
       * is not being called after the last integration (depends on the type of
       * integration being used), so we fix it by setting the correct time as a
       * post integration job.
       */
      ("post_integration") sim_data.set_time( THLA.execution_control.get_scenario_time() );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   BlockingIOPropagatedSineSimObj( BlockingIOPropagatedSineSimObj const & rhs );
   BlockingIOPropagatedSineSimObj & operator=( BlockingIOPropagatedSineSimObj const & rhs );

   // Do not allow the default constructor.
   BlockingIOPropagatedSineSimObj();
};


//=============================================================================
// SIM_OBJECT: AnalyticSineSimObj
// Sim-object for an analytic solution of a sine wave.
//=============================================================================
class AnalyticSineSimObj : public Trick::SimObject {

 public:
   TrickHLAModel::SineData    truth_data;
   TrickHLAModel::SineData    sim_data;
   TrickHLAModel::SinePacking packing;

   AnalyticSineSimObj()
   {
      // Note: Make sure to initialize the data before it gets sent in
      // the THLA_INIT simulation object.
      //
      // TrickHLA API data flow, sending data:   sim-data --> lag-comp-data --> packing-data
      // TrickHLA API data flow, receiving data: packing-data --> lag-comp-data --> sim-data
      P50 ("initialization") packing.configure( &sim_data );
      P50 ("initialization") packing.initialize();

      (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      (DYN_RATE, "scheduled") sim_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") sim_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      (THLA_DATA_CYCLE_TIME, "scheduled") sim_data.adjust_phase( THLA.execution_control.get_scenario_time() );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   AnalyticSineSimObj( AnalyticSineSimObj const & rhs );
   AnalyticSineSimObj & operator=( AnalyticSineSimObj const & rhs );
};


//=============================================================================
// SIM_OBJECT: PropagatedSineSimObj
// Sim-object for a propagated solution of a sine wave.
//=============================================================================
class PropagatedSineSimObj : public Trick::SimObject {

 public:
   TrickHLAModel::SineData    truth_data;
   TrickHLAModel::SineData    sim_data;
   TrickHLAModel::SinePacking packing;

   PropagatedSineSimObj()
   {
      // Note: Make sure to initialize the data before it gets sent in
      // the THLA_INIT simulation object.
      //
      // TrickHLA API data flow, sending data:   sim-data --> lag-comp-data --> packing-data
      // TrickHLA API data flow, receiving data: packing-data --> lag-comp-data --> sim-data
      P50 ("initialization") packing.configure( &sim_data );
      P50 ("initialization") packing.initialize();

      /*
       * -- Propagate the true sine state.
       */
      (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      /*
       * -- Numerically propagate the simulated sine state
       */
      ("derivative") sim_data.compute_derivative( get_integ_time() );
      ("integration") trick_ret = sim_data.integration();

      /*
       * The time is off by 0.005 seconds (DYN_RATE / 2) because the derivative
       * is not being called after the last integration (depends on the type of
       * integration being used), so we fix it by setting the correct time as a
       * post integration job.
       */
      ("post_integration") sim_data.set_time( THLA.execution_control.get_scenario_time() );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   PropagatedSineSimObj( PropagatedSineSimObj const & rhs );
   PropagatedSineSimObj & operator=( PropagatedSineSimObj const & rhs );
};


//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class THLAInitSimObject : public Trick::SimObject {

 public:

   TrickHLA::SimTimeline      sim_timeline;
   TrickHLA::ScenarioTimeline scenario_timeline;

   THLAInitSimObject( TrickHLA::Manager  & thla_mngr,
                      TrickHLA::Federate & thla_fed,
                      unsigned int         _MPI_1   = 100,
                      unsigned int         _MPI_END = P_SF_INIT_POST_MPI )
      : scenario_timeline( sim_timeline, 0.0, 0.0 ),
        thla_manager( thla_mngr ),
        thla_federate( thla_fed )
   {
      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Data will only be sent if this federate owns it.
      P_MPI_1 ("initialization") thla_manager.send_init_data( "A-side-Federate.Sine.cyclic" );

      // Data will only be received if it is remotely owned by another federate.
      P_MPI_1 ("initialization") thla_manager.receive_init_data( "A-side-Federate.Sine.cyclic" );

      // Do some processing here if needed...

      // Wait for all federates to reach this sync-point.
      P_MPI_1 ("initialization") thla_manager.wait_for_init_sync_point( "Analytic_init_phase" );


      // Data will only be sent if this federate owns it.
      P_MPI_END ("initialization") thla_manager.send_init_data( "P-side-Federate.Sine.cyclic" );

      // Data will only be received if it is remotely owned by another federate.
      P_MPI_END ("initialization") thla_manager.receive_init_data( "P-side-Federate.Sine.cyclic" );

      // Do some processing here if needed...

      // Wait for all federates to reach this sync-point.
      P_MPI_END ("initialization") thla_manager.wait_for_init_sync_point( "Propagated_init_phase" );


      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
//      P_MPI_1 ("initialization") thla_manager.send_init_data();

      // Wait to receive all the initialization data.
//      P_MPI_1 ("initialization") thla_manager.receive_init_data();

      // Do some processing here if needed...

      // Clear remaining initialization sync-points.
//      P_MPI_END ("initialization") thla_manager.clear_init_sync_points();
   }

 private:
   TrickHLA::Manager  & thla_manager;
   TrickHLA::Federate & thla_federate;

   // Do not allow the implicit copy constructor or assignment operator.
   THLAInitSimObject( THLAInitSimObject const & rhs );
   THLAInitSimObject & operator=( THLAInitSimObject const & rhs );

   // Do not allow the default constructor.
   THLAInitSimObject();
};


//==========================================================================
// SimObject instantiations.
//==========================================================================
// Main TrickHLA SimObject that supports SpaceFOM.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME,
                        THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY,
                        P_HLA_INIT,
                        P_HLA_LATE );

// Simulation specific multiphase initialization SimObject instance.
THLAInitSimObject THLA_INIT( THLA.manager, THLA.federate );

// Instantiations used for blocking I/O exchanges.
BlockingIOAnalyticSineSimObj   AB( THLA.federate );
BlockingIOPropagatedSineSimObj PB( THLA.federate );

// Instantiations used for cyclic exchanges.
AnalyticSineSimObj   AC;
PropagatedSineSimObj PC;


// Define the simulation objects that have routines involved in integration.
IntegLoop sim_integ_loopB (DYN_RATE) PB;
IntegLoop sim_integ_loopC (DYN_RATE) PC;

// All code listed in the create_connections routine is copied into S_source.cpp
// and is executed directly after sim-object instantiations. This routine may be
// used to connect data structures between SimObjects.
void create_connections() {

   // Assign a default integrator, which can be overridden in the input file.
   sim_integ_loopB.getIntegrator( Runge_Kutta_4, 6 );
   sim_integ_loopC.getIntegrator( Runge_Kutta_4, 6 );
}
