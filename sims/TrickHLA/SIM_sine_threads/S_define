
#include "sim_objects/default_trick_sys.sm"

//=============================================================================
// Define the job calling intervals.
//=============================================================================
#define DYN_RATE  0.250 // The propagation rate of the reference object.
#define LOG_CYCLE 0.250 // Data Logging Rate.

//=============================================================================
// Define the HLA job cycle times.
//=============================================================================
#define THLA_DATA_CYCLE_TIME        0.250 // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME 0.050 // HLA Interaction cycle time.

//=============================================================================
// Define the HLA phase initialization priorities.
//=============================================================================
#define P_HLA_INIT   60    // HLA initialization phase.
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_LATE   65534 // HLA late job phase.

##include "trick/integrator_c_intf.h"

// TrickHLA includes.
##include "TrickHLA/Manager.hh"
##include "TrickHLA/KnownFederate.hh"
##include "TrickHLA/SimTimeline.hh"
##include "TrickHLA/ScenarioTimeline.hh"

// Sine model includes.
##include "sine/include/SineData.hh"
##include "sine/include/SinePacking.hh"
##include "sine/include/SineLagCompensation.hh"
##include "sine/include/SineOwnershipHandler.hh"
##include "sine/include/SineInteractionHandler.hh"
##include "sine/include/SineObjectDeleted.hh"

// TrickHLA support for Trick Child Threads.
#include "THLAThread.sm"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "THLA.sm"


//=============================================================================
// SIM_OBJECT: AnalyticSineSimObj
// Sim-object for an analytic solution of a sine wave.
//=============================================================================
class AnalyticSineSimObj : public Trick::SimObject {

 public:
   TrickHLAModel::SineData               truth_data;
   TrickHLAModel::SineData               sim_data;

   TrickHLAModel::SineOwnershipHandler   ownership_handler;

   TrickHLAModel::SinePacking            packing;

   TrickHLAModel::SineLagCompensation    lag_compensation;

   TrickHLAModel::SineInteractionHandler interaction_handler;

   TrickHLAModel::SineObjectDeleted      obj_deleted_callback;

   AnalyticSineSimObj()
   {
      P50 ("initialization") lag_compensation.configure( &sim_data );
      P50 ("initialization") lag_compensation.initialize();

      P50 ("initialization") packing.configure( &lag_compensation );
      P50 ("initialization") packing.initialize();

      C1 (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      C1 (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      C1 (DYN_RATE, "scheduled") sim_data.compute_value( THLA.execution_control.get_scenario_time() );
      C1 (DYN_RATE, "scheduled") sim_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      C1 (THLA_DATA_CYCLE_TIME, "scheduled") sim_data.adjust_phase( THLA.execution_control.get_scenario_time() );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   AnalyticSineSimObj( AnalyticSineSimObj const & rhs );
   AnalyticSineSimObj & operator=( AnalyticSineSimObj const & rhs );
};


//=============================================================================
// SIM_OBJECT: PropagatedSineSimObj
// Sim-object for an propagated solution of a sine wave.
//=============================================================================
class PropagatedSineSimObj : public THLAThreadSimObject {

 public:
   TrickHLAModel::SineData               truth_data;
   TrickHLAModel::SineData               sim_data;

   TrickHLAModel::SinePacking            packing;

   TrickHLAModel::SineLagCompensation    lag_compensation;

   TrickHLAModel::SineInteractionHandler interaction_handler;

   TrickHLAModel::SineObjectDeleted      obj_deleted_callback;

   PropagatedSineSimObj( TrickHLA::Federate & thla_fed,
                         double               main_thread_data_cycle,
                         double               child_thread_data_cycle,
                         unsigned short       _THREAD_ID )
      : THLAThreadSimObject( thla_fed,
                             main_thread_data_cycle,
                             child_thread_data_cycle,
                             _THREAD_ID )
   {
      // Note: Make sure to initialize the data before it gets sent in
      // the THLA_INIT simulation object.
      P50 ("initialization") lag_compensation.configure( &sim_data );
      P50 ("initialization") lag_compensation.initialize();

      P50 ("initialization") packing.configure( &lag_compensation );
      P50 ("initialization") packing.initialize();

      /*
       * -- Propagate the true sine state.
       */
      C_THREAD_ID (DYN_RATE, "scheduled") truth_data.compute_value( THLA.execution_control.get_scenario_time() );
      C_THREAD_ID (DYN_RATE, "scheduled") truth_data.compute_derivative( THLA.execution_control.get_scenario_time() );

      /*
       * -- Numerically propagate the simulated sine state
       */
      C_THREAD_ID ("derivative") sim_data.compute_derivative( get_integ_time() );
      C_THREAD_ID ("integration") trick_ret = sim_data.integration();

      /*
       * The time is off by 0.005 seconds (DYN_RATE / 2) because the derivative
       * is not being called after the last integration (depends on the type of
       * integration being used), so we fix it by setting the correct time as a
       * post integration job.
       */
      C_THREAD_ID ("post_integration") sim_data.set_time( THLA.execution_control.get_scenario_time() );
   }

 private:
   // Do not allow the implicit copy constructor or assignment operator.
   PropagatedSineSimObj( PropagatedSineSimObj const & rhs );
   PropagatedSineSimObj & operator=( PropagatedSineSimObj const & rhs );
};

//=============================================================================
// SIM_OBJECT: THLA_INIT  (TrickHLA multi-phase initialization sim-object)
//=============================================================================
class THLAInitSimObj : public Trick::SimObject {

 public:

   TrickHLA::SimTimeline      sim_timeline;
   TrickHLA::ScenarioTimeline scenario_timeline;

   THLAInitSimObj( TrickHLA::Manager  & thla_mngr,
                   TrickHLA::Federate & thla_fed )
      : sim_timeline(),
        scenario_timeline( sim_timeline, 0.0, 0.0 ),
        thla_manager( thla_mngr ),
        thla_federate( thla_fed )
   {
      //------------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //------------------------------------------------------------------------
/*
      // Data will only be sent if this federate owns it.
      P100 ("initialization") thla_manager.send_init_data( "A-side-Federate.Sine" );

      // Data will only be received if it is remotely owned by another federate.
      P100 ("initialization") thla_manager.receive_init_data( "A-side-Federate.Sine" );

      // Do some processing here if needed...

      // Wait for all federates to reach this sync-point.
      P100 ("initialization") thla_manager.wait_for_init_sync_point( "Phase1" );


      // Data will only be sent if this federate owns it.
      P200 ("initialization") thla_manager.send_init_data( "P-side-Federate.Sine" );

      // Data will only be received if it is remotely owned by another federate.
      P200 ("initialization") thla_manager.receive_init_data( "P-side-Federate.Sine" );

      // Do some processing here if needed...

      // Wait for all federates to reach this sync-point.
      P200 ("initialization") thla_manager.wait_for_init_sync_point( "Phase2" );
*/

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();

      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();

      // Do some processing here if needed...

      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();
   }

 private:
   TrickHLA::Manager  & thla_manager;
   TrickHLA::Federate & thla_federate;

   // Do not allow the implicit copy constructor or assignment operator.
   THLAInitSimObj( THLAInitSimObj const & rhs );
   THLAInitSimObj & operator=( THLAInitSimObj const & rhs );

   // Do not allow the default constructor.
   THLAInitSimObj();
};

//==========================================================================
// SimObject instantiations.
//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
THLASimObject THLA( THLA_DATA_CYCLE_TIME,
                    THLA_INTERACTION_CYCLE_TIME,
                    P_HLA_EARLY,
                    P_HLA_INIT,
                    P_HLA_LATE );

// Simulation specific multiphase initialization SimObject instance.
THLAInitSimObj THLA_INIT( THLA.manager, THLA.federate );

// Instantiations
AnalyticSineSimObj A;

// Example 1 showing a THLAThread sim-object created to associate the Trick child
// thread (i.e. 1) used by the 'A' sim-object to TrickHLA with the specified
// HLA data cycle time.
THLAThreadSimObject THLAThread1( THLA.federate,
                                 THLA_DATA_CYCLE_TIME, // Main thread data cycle time.
                                 THLA_DATA_CYCLE_TIME, // Child thread data cycle time.
                                 1 );                  // Trick child thread 1 (i.e. C1).

// Example 2 showing a 'P' sim-object that extends the TrickHLAThread sim-object
// to associate a Trick child thread (i.e. 2) to TrickHLA with the specified
// HLA data cycle time.
PropagatedSineSimObj P( THLA.federate,
                        THLA_DATA_CYCLE_TIME, // Main thread data cycle time.
                        THLA_DATA_CYCLE_TIME, // Child thread data cycle time.
                        2 );                  // Trick child thread 2 (i.e. C2)


// Define the simulation objects that have routines involved in integration.
IntegLoop sim_integ_loop (DYN_RATE) P;

// All code listed in the create_connections routine is copied into S_source.cpp
// and is executed directly after sim-object instantiations. This routine may be
// used to connect data structures between SimObjects.
void create_connections() {

   // Assign a default integrator, which can be overridden in the input file.
   sim_integ_loop.getIntegrator( Runge_Kutta_4, 6 );
}

