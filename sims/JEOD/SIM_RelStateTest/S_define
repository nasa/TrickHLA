//==========================================================================
// Space Reference FOM: Simulation to test the SpaceFOM reference frame
// tree and asscoiated relative state computations.
//==========================================================================
// Description:
// This simulation generates a SpaceFOM compliant reference frame tree
// using JEOD models and mapping them into SpaceFOM ReferenceFrame object
// instances.  Three space vehicles are placed in orbit around the Earth,
// Moon, and Mars.  The JEOD RelKin models are then used to validate the
// relative state computations based on the SpaceFOM Reference Frame Tree
// reltative state code.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================

// Define the Trick default system infrastructure.
#include "sim_objects/default_trick_sys.sm"

//==========================================================================
// Define the JEOD job cycle times.
//==========================================================================
#define LOW_RATE_ENV  60.00    // Low-rate environment update interval
#define HIGH_RATE_ENV  0.250   // High-rate environment update interval
#define DYNAMICS       0.03125 // Vehicle and planetary dynamics interval (32Hz)

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        HIGH_RATE_ENV // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME DYNAMICS      // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_EARLY         1     // HLA early job phase.
#define P_SF_INIT_EPOCH_RRF 9     // SpaceFOM ExCO epoch and root reference frame phase.
#define P_HLA_INIT          9     // HLA initialization phase.
#define P_SF_INIT_PRE_MPI   65    // SpaceFOM Pre-Multi Phase initialization phase.
#define P_SF_INIT_POST_MPI  500   // SpaceFOM Post-Multi Phase initialization phase.
#define P_HLA_LATE          65534 // HLA late job phase.


//==========================================================================
// JEOD include files used in SimObject definitions or for input file
// instantiations.
//==========================================================================
#include "default_priority_settings.sm"
#include "jeod_sys.sm"

// Set up desired time types and include the JEOD time S_module
#define TIME_MODEL_UT1
#define TIME_MODEL_UTC
#define TIME_MODEL_TT
#define TIME_MODEL_GMST
#define TIME_CALENDAR_UPDATE_INTERVAL  DYNAMICS
#include "jeod_time.sm"

#include "dynamics.sm"

#ifndef EPHEM_DE440
#define EPHEM_DE440
#endif
#include "environment.sm"
#include "sun_basic.sm"
#include "earth_GGM05C.sm"
#include "mars_MRO110B2.sm"


/*****************************************************************************
Moon is a copy of the default Moon-with-LP150Q gravity field sim object, but
this also has a derivative class job to update the lunar orientation.
*****************************************************************************/
#include "Base/moon_LP150Q.sm"
class MoonSimObject : public Moon_LP150Q_SimObject
{

  public:
   MoonSimObject( jeod::DynManager     & dyn_manager_,
                  jeod::GravityManager & grav_manager_,
                  jeod::De4xxEphemeris & de4xx_)
      : Moon_LP150Q_SimObject( dyn_manager_, grav_manager_),
        de4xx( de4xx_)
   {
      P_ENV ("derivative") de4xx.propagate_lunar_rnp ( );
   }

  private:
   // Private internal references to external object instances.
   // These MUST be assigned in the constructor at instantiation.
   jeod::De4xxEphemeris & de4xx;

   // This object is not copyable.
   MoonSimObject (const MoonSimObject&);
   MoonSimObject & operator = (const MoonSimObject&);
   
   // Do not allow the default constructor.
   MoonSimObject();
};
MoonSimObject moon (dynamics.dyn_manager, env.gravity_manager, env.de4xx);


//==========================================================================
// Instantiate two simple JEOD vehicles for orbital state computation.
//==========================================================================
##include "dynamics/dyn_body/include/dyn_body.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_controls.hh"
##include "dynamics/body_action/include/dyn_body_init_trans_state.hh"
##include "dynamics/body_action/include/dyn_body_init_rot_state.hh"
##include "dynamics/body_action/include/mass_body_init.hh"
##include "environment/gravity/include/gravity_manager.hh"

class VehicleSimObject: public Trick::SimObject
{

  public:
   jeod::DynBody dyn_body;
   jeod::SphericalHarmonicsGravityControls  sun_grav_control;
   jeod::SphericalHarmonicsGravityControls  earth_grav_control;
   jeod::SphericalHarmonicsGravityControls  moon_grav_control;
   jeod::SphericalHarmonicsGravityControls  mars_grav_control;

   jeod::DynBodyInitTransState trans_init;
   jeod::DynBodyInitRotState rot_init;
   jeod::MassBodyInit mass_init;

   //Constructor
   VehicleSimObject( jeod::DynManager & dyn_mngr_in )
      : dyn_manager(dyn_mngr_in)
   {
      //
      //Default data jobs
      //

      //
      // Initialization jobs
      //
      P_ENV("initialization") dyn_body.initialize_model(dyn_manager);

      //
      // Environment class jobs
      //

      //
      // Derivative class jobs
      //
   }

  private:
   // Private internal references to external object instances.
   // These MUST be assigned in the constructor at instantiation.
   jeod::DynManager & dyn_manager;

   // This object is not copyable
   VehicleSimObject (const VehicleSimObject&) = delete;
   VehicleSimObject & operator = (const VehicleSimObject&) = delete;
   
   // Do not allow the default constructor.
   VehicleSimObject();

};

// Instantiate two test vehicles.
VehicleSimObject veh1(dynamics.dyn_manager);
VehicleSimObject veh2(dynamics.dyn_manager);


//==========================================================================
// Define the RelKinSimObject that is used to compute the JEOD-based
// relative state computations.
//==========================================================================
#include "JEOD/JEODDynBodyRelState.sm"

EntityRelStateSimObject relstate1( dynamics.dyn_manager, relkin.rel_kin, veh1.dyn_body );
EntityRelStateSimObject relstate2( dynamics.dyn_manager, relkin.rel_kin, veh2.dyn_body );


//==========================================================================
// Trick HLA and SpaceFOM include files used in SimObject definitions or
// for input file instantiations.
//==========================================================================

// This is needed for CTE timeline instantiation in the input file.
##include "TrickHLA/CTETimelineBase.hh"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM/SpaceFOM.sm"


//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
#include "JEOD/JEODHLAInit.sm"


//==========================================================================
// SIM_OBJECT: JEODRefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
#include "JEOD/JEODRefFrameTree.sm"


//==========================================================================
// SIM_OBJECT: JEODPhysicalEntiySimObject - An example PhysicalEntity
// simulation object definition. This can be used for SpaceFOM
// PhysicalEntity object discovery and data exchange.
//==========================================================================
#include "JEOD/JEODPhysicalEntity.sm"


// Instantiate the SpaceFOM PhysicalEntity object associated with the JEOD DynBody.
JEODPhysicalEntiySimObject veh1_physical_entity( veh1.dyn_body, P_HLA_INIT );
JEODPhysicalEntiySimObject veh2_physical_entity( veh2.dyn_body, P_HLA_INIT );


//==========================================================================
// SIM_OBJECT: SpaceFOMPhysicalEntityRelState - A simulation object
// definition used to compute the relative state of an instantiated
// SpaceFOM::PhysicalEntityBase with respect to an identified reference
// frame present in the reference frame tree.
//==========================================================================
#include "SpaceFOM/PhysicalEntityRelState.sm"

// Instantiate a relative state test object.
SpaceFOMPhysicalEntityRelState rel_test1( ref_frame_tree.frame_tree,
                                          veh1_physical_entity.entity_packing,
                                          solar_system_barycenter.frame_packing );
SpaceFOMPhysicalEntityRelState rel_test2( ref_frame_tree.frame_tree,
                                          veh2_physical_entity.entity_packing,
                                          solar_system_barycenter.frame_packing );


//==========================================================================
// SimObject instantiations.
//==========================================================================
// Main TrickHLA SimObject.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME,
                        THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY,
                        P_HLA_INIT,
                        P_HLA_LATE );

// SimObject used capture simulation specific initialization.
JEODHLAInitSimObject THLA_INIT( jeod_time.time_manager,
                                jeod_time.time_manager_init,
                                jeod_time.time_tai,
                                jeod_time.time_tt,
                                THLA.manager,
                                THLA.federate,
                                THLA.execution_control,
                                P_SF_INIT_EPOCH_RRF,
                                10,
                                P_HLA_INIT );


// Setup the integration loop.
IntegLoop sim_integ_loop  (DYNAMICS) earth, moon, mars, dynamics, relkin;


//==========================================================================
// Create the THLA connections for the SpaceFOM Reference Frame Tree.
//==========================================================================
void create_connections() {
   // Make the connections for the Sun, Earth, Moon, Mars reference frame tree.
   ref_frame_tree.ssbary_frame_ptr = &solar_system_barycenter.frame_packing;
   ref_frame_tree.sun_frame_ptr = &sun_inertial.frame_packing;
   ref_frame_tree.embary_frame_ptr = &earth_moon_barycenter.frame_packing;
   ref_frame_tree.earth_frame_ptr = &earth_centered_inertial.frame_packing;
   ref_frame_tree.moon_frame_ptr = &moon_centered_inertial.frame_packing;
   ref_frame_tree.mars_frame_ptr = &mars_centered_inertial.frame_packing;
   ref_frame_tree.earth_pfix_frame_ptr = &earth_centered_fixed.frame_packing;
   ref_frame_tree.moon_pfix_frame_ptr = &moon_centered_fixed.frame_packing;
   ref_frame_tree.mars_pfix_frame_ptr = &mars_centered_fixed.frame_packing;
}
